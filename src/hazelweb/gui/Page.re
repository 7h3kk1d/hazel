open Virtual_dom.Vdom;
open Node;
let logo_panel =
  a(
    [Attr.classes(["logo-text"]), Attr.href("https://hazel.org")],
    [text("Hazel")],
  );

let top_bar = (~inject: ModelAction.t => Ui_event.t, ~model: Model.t) => {
  div(
    [Attr.classes(["top-bar"])],
    [
      logo_panel,
      CardsPanel.view(~inject, ~model),
      ActionMenu.view(~inject),
    ],
  );
};

let left_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) =>
  Sidebar.left(~inject, ~is_open=model.left_sidebar_open, () =>
    [ActionPanel.view(~inject, model)]
  );

let right_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) => {
  let settings = model.settings;
  let program = Model.get_program(model);
  let selected_instance = Model.get_selected_hole_instance(model);
  Sidebar.right(~inject, ~is_open=model.right_sidebar_open, () =>
    [
      ContextInspector.view(
        ~inject,
        ~selected_instance,
        ~settings=settings.evaluation,
        ~font_metrics=model.font_metrics,
        program,
      ),
      UndoHistoryPanel.view(~inject, model),
      SettingsPanel.view(~inject, settings),
    ]
  );
};

let branch_panel = {
  let br = Version_autogenerated.branch;
  let ch = Version_autogenerated.commit_hash_short;
  let ct = Version_autogenerated.commit_time;
  let str = "[" ++ br ++ " @ " ++ ch ++ " (" ++ ct ++ ")]";
  div(
    [
      Attr.style(Css_gen.(white_space(`Pre) @> font_family(["monospace"]))),
    ],
    [span([Attr.classes(["branch-panel"])], [text(str)])],
  );
};

let type_indicator_view = (ty: HTyp.t): Node.t => {
  let type_label =
    div([Attr.classes(["type-label"])], [text("Result of type: ")]);
  let type_view =
    div([Attr.classes(["htype-view"])], [HTypCode.view(ty)]);
  div(
    [Attr.classes(["cell-status"])],
    [div([Attr.classes(["type-indicator"])], [type_label, type_view])],
  );
};

let result_view = (~settings: Settings.t, ~model: Model.t, ~inject): Node.t => {
  let program = Model.get_program(model);
  let result = program |> Program.get_result;
  let selected_instance = Model.get_selected_hole_instance(model);
  let (_, ty, _) = program.edit_state;
  //TODO(andrew): clean
  let (result_dhexp, assert_map) =
    settings.evaluation.show_unevaluated_elaboration
      ? (program |> Program.get_elaboration, AssertMap.empty)
      : (result |> Result.get_dhexp, result |> Result.get_dhexp_assert |> snd);
  div(
    [],
    [
      type_indicator_view(ty),
      div(
        [Attr.classes(["result-view"])],
        [
          DHCode.view(
            ~inject,
            ~selected_instance,
            ~font_metrics=model.font_metrics,
            ~settings=settings.evaluation,
            ~width=80,
            result_dhexp,
            assert_map //TODO(andrew): clean
          ),
        ],
      ),
    ],
  );
};

let page = (~inject: ModelAction.t => Event.t, ~model: Model.t): Node.t => {
  let settings = model.settings;
  let result_view =
    !settings.evaluation.evaluate
      ? div([], []) : result_view(~settings, ~model, ~inject);
  let card_caption =
    div(
      [Attr.class_("card-caption")],
      [Model.get_card(model).info.caption],
    );
  div(
    [Attr.class_("page")],
    [card_caption, Cell.view(~inject, model), result_view],
  );
};

let view = (~inject: ModelAction.t => Event.t, model: Model.t): Node.t => {
  let page_area =
    div([Attr.id("page-area")], [page(~inject, ~model), branch_panel]);
  let main_area =
    div(
      [Attr.class_("main-area")],
      [
        left_sidebar(~inject, ~model),
        div([Attr.classes(["flex-wrapper"])], [page_area]),
        right_sidebar(~inject, ~model),
      ],
    );
  div([Attr.id("root")], [top_bar(~inject, ~model), main_area]);
};
