open Virtual_dom.Vdom;
open Node;
let logo_panel =
  a(
    [Attr.classes(["logo-text"]), Attr.href("https://hazel.org")],
    [text("Hazel")],
  );

let top_bar = (~inject: ModelAction.t => Ui_event.t, ~model: Model.t) => {
  div(
    [Attr.classes(["top-bar"])],
    [
      logo_panel,
      CardsPanel.view(~inject, ~model),
      ActionMenu.view(~inject),
    ],
  );
};

let left_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) =>
  Sidebar.left(~inject, ~is_open=model.left_sidebar_open, () =>
    [ActionPanel.view(~inject, model)]
  );

let right_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) => {
  let settings = model.settings;
  let program = Model.get_program(model);
  let selected_instance = Model.get_selected_hole_instance(model);
  Sidebar.right(~inject, ~is_open=model.right_sidebar_open, () =>
    [
      ContextInspector.view(
        ~inject,
        ~selected_instance,
        ~settings=settings.evaluation,
        ~font_metrics=model.font_metrics,
        program,
      ),
      UndoHistoryPanel.view(~inject, model),
      SettingsPanel.view(~inject, settings),
    ]
  );
};

let branch_panel = {
  let git_str =
    Printf.sprintf(
      "[%s @ %s (%s)]",
      Version_autogenerated.branch,
      Version_autogenerated.commit_hash_short,
      Version_autogenerated.commit_time,
    );
  span([Attr.class_("branch-panel")], [text(git_str)]);
};

let type_view = (ty: HTyp.t): Node.t => {
  let type_label =
    div([Attr.class_("type-label")], [text("Result of type: ")]);
  let type_view = div([Attr.class_("htype-view")], [HTypCode.view(ty)]);
  div(
    [Attr.class_("cell-status")],
    [div([Attr.class_("type-indicator")], [type_label, type_view])],
  );
};

let result_view =
    (~settings: Settings.t, ~model: Model.t, ~inject, result): Node.t =>
  div(
    [Attr.classes(["result-view"])],
    [
      DHCode.view(
        ~inject,
        ~selected_instance=Model.get_selected_hole_instance(model),
        ~font_metrics=model.font_metrics,
        ~settings=settings.evaluation,
        ~width=80,
        result,
      ),
    ],
  );

let status_view = (~settings: Settings.t, ~model: Model.t, ~inject): Node.t => {
  let program = Model.get_program(model);
  let result =
    settings.evaluation.show_unevaluated_elaboration
      ? program |> Program.get_elaboration
      : program |> Program.get_result |> Result.get_dhexp;
  let (_, ty, _) = program.edit_state;
  div(
    [],
    [type_view(ty), result_view(~settings, ~model, ~inject, result)],
  );
};

let page = (~inject: ModelAction.t => Event.t, ~model: Model.t): Node.t => {
  let settings = model.settings;
  let result_view =
    !settings.evaluation.evaluate
      ? div([], []) : status_view(~settings, ~model, ~inject);
  let card_caption =
    div(
      [Attr.class_("card-caption")],
      [Model.get_card(model).info.caption],
    );
  div(
    [Attr.class_("page")],
    [card_caption, Cell.view(~inject, model), result_view],
  );
};

let view = (~inject: ModelAction.t => Event.t, model: Model.t): Node.t => {
  let page_area =
    div([Attr.id("page-area")], [page(~inject, ~model), branch_panel]);
  let main_area =
    div(
      [Attr.class_("main-area")],
      [
        left_sidebar(~inject, ~model),
        div([Attr.classes(["flex-wrapper"])], [page_area]),
        right_sidebar(~inject, ~model),
      ],
    );
  div([Attr.id("root")], [top_bar(~inject, ~model), main_area]);
};
